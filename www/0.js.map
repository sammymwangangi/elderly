{"version":3,"sources":["./node_modules/@alan-ai/alan-button/dist/esm/alan-button.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAkG;;AAElG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA,uBAAuB,4DAAW;AAClC,yBAAyB,4DAAW;AACpC,qBAAqB,4DAAW;AAChC,2BAA2B,4DAAW;AACtC,gCAAgC,4DAAW;AAC3C;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,eAAe,4DAAC,cAAc,4DAAC,SAAS,wBAAwB;AAChE;AACA,mBAAmB,QAAQ,4DAAU,OAAO;AAC5C;;AAEqC","file":"0.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-18e88af1.js';\n\nfunction isCordova() {\n    return window && window.cordova;\n}\n\nclass Device {\n    constructor() {\n        this.readyStatusPromise = new Promise((resolve) => {\n            if (isCordova()) {\n                this.interval = setInterval(() => {\n                    if (window.cordova && typeof window.cordova.exec === 'function') {\n                        clearInterval(this.interval);\n                        resolve();\n                    }\n                }, 300);\n            }\n            else {\n                resolve();\n            }\n        });\n    }\n    ready() {\n        return this.readyStatusPromise;\n    }\n}\nconst device = new Device();\n\nclass AlanButton {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.alanHolderId = 'alan-holder';\n        this.command = createEvent(this, \"command\", 7);\n        this.onCommand = createEvent(this, \"onCommand\", 7);\n        this.event = createEvent(this, \"event\", 7);\n        this.buttonState = createEvent(this, \"buttonState\", 7);\n        this.connectionStatus = createEvent(this, \"connectionStatus\", 7);\n    }\n    /** Method for setting the visual state.\n     * @param {object} visualState - Visual state data object.\n     * */\n    async setVisualState(visualState) {\n        if (isCordova()) {\n            cordova.exec(() => {\n            }, () => {\n            }, \"alanVoice\", \"setVisualState\", [visualState]);\n        }\n        else {\n            this.alanBtnInst.setVisualState(visualState);\n        }\n    }\n    /** Method for calling a project API that was defined in Alan Studio projectâ€™s script.\n     * @param {string} funcName - API method name.\n     * @param {object} data - Data that should be passed to the project API method.\n     * @param {Function} callback - Callback that could be returned from the project API method.\n     *\n     * */\n    async callProjectApi(funcName, data, callback) {\n        if (isCordova()) {\n            cordova.exec(() => {\n                callback.apply(this, ...arguments);\n            }, () => {\n            }, \"alanVoice\", \"callProjectApi\", [funcName, data]);\n        }\n        else {\n            this.alanBtnInst.callProjectApi(funcName, data, callback);\n        }\n    }\n    /** Method for playing text using text-to-speech.\n     * @param {string} text - Text that should be played.\n     * */\n    async playText(text) {\n        if (isCordova()) {\n            cordova.exec(() => {\n            }, () => {\n            }, \"alanVoice\", \"playText\", [text]);\n        }\n        else {\n            this.alanBtnInst.playText(text);\n        }\n    }\n    /** Method for sending command(synchronised with voice).\n     * @param {object} command - Command data.\n     * */\n    async playCommand(command) {\n        if (isCordova()) {\n            cordova.exec(() => {\n            }, () => {\n            }, \"alanVoice\", \"playCommand\", \n            // [{data: command}]);\n            [command]);\n        }\n        else {\n            this.alanBtnInst.playCommand(command);\n        }\n    }\n    /** Method for activating the Alan button.\n     * */\n    async activate() {\n        if (isCordova()) {\n            return new Promise(function (resolve, reject) {\n                cordova.exec(() => {\n                    resolve();\n                }, () => {\n                    reject();\n                }, \"alanVoice\", \"activate\", []);\n            });\n        }\n        else {\n            return this.alanBtnInst.activate();\n        }\n    }\n    /** Method for deactivating the Alan button.\n     * */\n    async deactivate() {\n        if (isCordova()) {\n            cordova.exec(() => {\n            }, () => {\n            }, \"alanVoice\", \"deactivate\", []);\n        }\n        else {\n            this.alanBtnInst.deactivate();\n        }\n    }\n    /** Method for getting active status of the Alan button.\n     * */\n    async isActive() {\n        if (isCordova()) {\n            return new Promise(function (resolve, reject) {\n                cordova.exec((res) => {\n                    resolve(res);\n                }, () => {\n                    reject();\n                }, \"alanVoice\", \"isActive\", []);\n            });\n        }\n        else {\n            return this.alanBtnInst.isActive();\n        }\n    }\n    /** Method for removing the Alan button.\n     * */\n    async removeButton() {\n        if (isCordova()) {\n            cordova.exec(() => {\n            }, () => {\n            }, \"alanVoice\", \"removeButton\", []);\n        }\n        else {\n            this.alanBtnInst.remove();\n            this.alanBtnInst = null;\n        }\n    }\n    getHost() {\n        return this.alanHost || 'studio.alan.app';\n    }\n    componentDidLoad() {\n        if (isCordova()) {\n            device.ready().then(() => {\n                cordova.exec((successCbData) => {\n                    // command and onCommand are reversed to be consistent with html style adding events\n                    if (successCbData.type === 'command') {\n                        this.onCommand.emit(successCbData.data);\n                    }\n                    if (successCbData.type === 'onCommand') {\n                        this.command.emit(successCbData.data);\n                    }\n                    if (successCbData.type === 'onButtonState') {\n                        this.buttonState.emit(successCbData.data);\n                    }\n                    if (successCbData.type === 'onEvent') {\n                        this.event.emit(successCbData.data);\n                    }\n                    if (successCbData.type === 'connectionState') {\n                        this.connectionStatus.emit(successCbData.data);\n                    }\n                }, () => {\n                }, \"alanVoice\", \"addButton\", [this.alanKey, this.left, this.right, this.bottom, this.zIndex]);\n            });\n        }\n        else {\n            this.alanBtnInst = alanBtn({\n                key: this.alanKey,\n                host: this.getHost(),\n                size: this.size,\n                left: this.left,\n                right: this.right,\n                bottom: this.bottom,\n                zIndex: this.zIndex,\n                rootEl: this.element.shadowRoot.getElementById(this.alanHolderId),\n                shadowDOM: this.element.shadowRoot,\n                onCommand: (data) => {\n                    this.command.emit(data);\n                },\n                onEvent: (data) => {\n                    this.event.emit(data);\n                },\n                onButtonState: (data) => {\n                    this.buttonState.emit(data);\n                },\n                onConnectionStatus: (data) => {\n                    let status = data === 'authorized' ? 'connected' : 'disconnected';\n                    this.connectionStatus.emit(status);\n                },\n            });\n        }\n    }\n    render() {\n        return h(\"div\", null, h(\"div\", { id: this.alanHolderId }));\n    }\n    get element() { return getElement(this); }\n}\n\nexport { AlanButton as alan_button };\n"],"sourceRoot":"webpack:///"}